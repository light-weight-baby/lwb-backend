generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique @default(uuid())
  email    String @unique
  name     String
  password String

  session Session?
  type    registerType

  profile   Profile?
  partners  User[]    @relation("Partner", map: "UserPartners")
  partnerOf User[]    @relation("Partner")
  workouts  Workout[]
  // messages Message[]

  resetToken           String?
  resetTokenExpiration DateTime?
}

model Profile {
  id             String     @id @default(uuid())
  user           User       @relation(fields: [userId], references: [id])
  userId         String     @unique
  age            Int?
  gender         Gender?
  weightLb       Int?
  heightFoot     Int?
  heightInch     Int?
  squatLb        Int?
  deadLiftLb     Int?
  benchPressLb   Int?
  workoutPattern Json?
  archetype      Archetype?
  yoe            Int?
  pictureUrl     String?
  bio            String?
}

model Gym {
  id       String @id @default(uuid())
  location Int[]  @unique
  name     String
}

model Workout {
  id       String       @id @default(uuid())
  partners User[] // currently only support 2. @TODO: support group meetups
  datetime DateTime
  status   MeetupStatus
  type     WorkoutType
  location Int[]        @unique
  rating   Int
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  userId    String?  @unique
  user      User?    @relation(fields: [userId], references: [id])
  socketId  String?  @unique
  expiresAt DateTime
}

enum registerType {
  LOCAL
  GOOGLE
  FACEBOOk
  INSTAGRAM
}

enum MeetupStatus {
  SCHEDULED
  IN_PROGRESS
  DONE
  RATED
}

enum WorkoutType {
  GYM // currently only support gym lifting. @TODO add additional workout support
}

enum Archetype {
  POWER_LIFTER
  BODY_BUILDER
  CALISTHENIC
  ATHELETIC // train for sports (not MVP)
  // HIIT // high intensity like cross-fit (not MVP)
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
